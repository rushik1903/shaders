// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePlanetHeight


RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
RWStructuredBuffer<float3> craterCentres;
RWStructuredBuffer<float> craterRadii;
RWStructuredBuffer<float> craterDepth;


float planetRadius;
uint numCraters;
uint numVertices;
float smoothness;
float rimWidth;//between 0-1
float rimHeight;//between 0-1

float Clamp01(int a){
    if(a>1){return 1;}
    if(a<0){return 0;}
    return a;
}

float SmoothMin(float a, float b, float k){
    float h = Clamp01((b-a+k) / (2*k));
    return a*h+b*(1-h) - k*h *(1-h);
}

float SmoothMax(float a, float b, float k){
    k=-k;
    float h = Clamp01((b-a+k) / (2*k));
    return a*h+b*(1-h) - k*h *(1-h);
}

[numthreads(10,1,1)]
void ComputePlanetHeight (uint id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if(id>=numVertices){return;}
    float3 vertexPos = normalize(vertices[id])*planetRadius;
    //heights[id] = 1+(sin(vertexPos.y*testValue)*0.05);
    heights[id] = planetRadius;
    float3 planetCentre = (0,0,0);
    /*for(int i=0;i<numCraters;i++){
        if(length(vertexPos - craterCentres[i]) > craterRadii[i]*(1+rimWidth)){continue;}
        float flatH = heights[id] - (length(craterCentres[i] - planetCentre) / dot(normalize(craterCentres[i] - planetCentre), normalize(vertexPos - planetCentre)));
        heights[id] -= flatH;
    }*/

    for(int i=0;i<numCraters;i++){
        float craterRadius = sqrt((planetRadius*planetRadius) - (length(craterCentres[i] - planetCentre) * length(craterCentres[i] - planetCentre)));
        if(length(vertexPos - craterCentres[i]) > craterRadius*(1+rimWidth)){continue;}
        float flatH = (length(craterCentres[i] - planetCentre) / dot(normalize(craterCentres[i] - planetCentre), normalize(vertexPos - planetCentre)));
        heights[id] -= (planetRadius - flatH);
        //until above, we made the surface flat
    }
}